[build-system]
requires = ["setuptools>=64.0", "setuptools_scm"]
build-backend = "setuptools.build_meta"

[project]
name = "taps"
version = "0.2.3dev1"
authors = [
    {name = "Greg Pauloski", email = "jgpauloski@uchicago.edu"},
    {name = "Globus Labs"},
]
description = "Task Performance Suite for benchmarking parallel execution frameworks."
readme = "README.md"
requires-python = ">=3.9"
license = {text = "MIT"}
classifiers = [
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: Implementation :: CPython",
]
dependencies = [
    "dask[distributed]",
    "globus-compute-sdk",
    "parsl",
    "proxystore>=0.7.0",
    "psutil",
    "pydantic>=2,<2.10 ; python_version<'3.9'",
    "pydantic>=2 ; python_version>='3.9'",
    "pydantic-settings>=2.3.0",
    "ray[client]",
    "tomli-w",
]

[project.urls]
Homepage = "https://taps.proxystore.dev"
Documentation = "https://taps.proxystore.dev"
Source = "https://github.com/proxystore/taps"

[project.optional-dependencies]
cholesky = ["numpy"]
docking = ["numpy", "pandas", "requests", "scikit-learn", "rdkit"]
fedlearn = ["numpy", "torch", "torchvision"]
moldesign = ["ase", "matplotlib", "numpy", "pandas", "rdkit==2023.9.6", "scikit-learn", "tqdm"]
montage = ["montage_wrapper", "pandas"]
physics = ["matplotlib", "noise", "numpy<2", "pybullet", "scipy"]
dev = [
    "taps[cholesky,montage]",
    "covdefaults>=2.2",
    "coverage",
    "mypy",
    "pre-commit",
    "pytest",
    "pytest-cov",
    "ruff>=0.2.0",
    "tox",
    "types-psutil",
    "types-requests",
    "virtualenv",
]
docs = [
    "black==24.4.2",
    "griffe-fieldz==0.2.0",
    "mkdocs-autorefs==1.3.1",
    "mkdocs-click==0.8.1",
    "mkdocs-gen-files==0.5.0",
    "mkdocs-literate-nav==0.6.1",
    "mkdocs-material==9.5.32",
    "mkdocs-section-index==0.3.9",
    "mkdocstrings==0.25.2",
    "mkdocstrings-python==1.10.8",
    "mike==2.1.3",
]

[tool.codespell]
skip = """
.git,
.github,
__pycache__,
build,
dist,
.*egg-info
"""

[tool.coverage.run]
plugins = ["covdefaults"]
concurrency = ["multiprocessing", "thread"]
omit = [
    "taps/apps/docking/*",
    "taps/apps/fedlearn/*",
    "taps/apps/moldesign/*",
    "taps/apps/physics.py",
]
parallel = true

[tool.mypy]
plugins = [
    "proxystore.mypy_plugin",
    "pydantic.mypy",
]
python_version = "3.12"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_configs = true
warn_unused_ignores = true

[[tool.mypy.overrides]]
module = "testing.*"
allow_incomplete_defs = true
allow_untyped_defs = true

[[tool.mypy.overrides]]
module = "tests.*"
allow_incomplete_defs = true
allow_untyped_defs = true

[tool.ruff]
line-length = 79
target-version = "py39"

[tool.ruff.format]
indent-style = "space"
quote-style = "single"

[tool.ruff.lint]
# See all rules here: https://beta.ruff.rs/docs/rules
select = [
    # pyflakes
    "F",
    # pycodestyle
    "E",
    # mccabe
    "C90",
    # isort
    "I",
    # pep8-naming
    "N",
    # pydocstyle
    "D",
    # pyupgrade
    "UP",
    # flake8-2020
    "YTT",
    # flake8-bugbear
    "B",
    # flake8-builtins
    "A",
    # flake8-commas
    "COM",
    # flake8-comprehensions
    "C4",
    # flake8-implicit-str-concat
    "ISC",
    # flake8-pytest-style
    "PT",
    # flake8-quotes
    "Q",
    # flake8-debugger
    "T10",
    # flake8-simplify
    "SIM",
    # PyLint
    "PL",
    # ruff-specific
    "RUF",
]
extend-ignore = [
    # Do not require docstrings for modules, packages, magic methods, or __init__ methods
    "D100", "D104", "D105", "D107",
    # Allow builtin attribute and module shadowing
    "A003", "A005",
    # Ruff will change all([generator]) to all(generator) because the all/any
    # generator expressions directly and the list comprehension is not needed.
    # However, coverage marks unfinished generators as not covered and
    # all/any can early exit before exhausting the generator.
    "C419",
    # Allow imports not at top of file. Needed for parsl apps.
    "PLC0415",
    # Allow pytest.raises() without match
    "PT011",
    # Allow nested contexts
    "SIM117",
]

[tool.ruff.lint.flake8-pytest-style]
parametrize-values-type = "tuple"

[tool.ruff.lint.flake8-quotes]
inline-quotes = "single"
multiline-quotes = "double"

[tool.ruff.lint.isort]
force-single-line = true
known-first-party = ["wbench", "test", "testing"]
order-by-type = false
required-imports = ["from __future__ import annotations"]

[tool.ruff.lint.per-file-ignores]
"taps/**.py" = ["PLR0913"]
"tests/**.py" = ["D10"]
"testing/**.py" = ["D10"]
"tests/conftest.py" = ["F401"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.setuptools.packages.find]
exclude = ["tests*", "testing*"]
namespaces = false
